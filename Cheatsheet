##################################################
# Name: Kubernetes Cheatsheet
# Author: faruk guler
#
#
##################################################

# Kubernetes Info:
kubectl version
ctr version [containerd version]
kubectl version --client
kubectl config view
kubectl cluster-info
kubectl get componentstatus
kubectl get nodes
kubectl get namespaces

# Kubernetes Helper:
kubectl -h
kubectl create -h
kubectl run -h
kubectl explain deploy.spec

# Image Management: [List - Pull - Remove]
sudo ctr image ls
sudo ctr image ls | awk '{print $1}'
sudo ctr image pull docker.io/library/nginx:latest
#sudo ctr image rm rancherix
>> Image List-Pull-Remove Containerd:
sudo ctr images list [Images List Containerd]
ctr images pull docker.io/nginx:latest
#sudo ctr images rm docker.io/library/nginx:latest


>> Image List-List-Remove Kubernetes:
sudo ctr -n k8s.io images list | awk '{print $1}'
sudo ctr -n k8s.io image pull docker.io/library/nginx:latest
sudo ctr -n k8s.io image pull docker.io/library/debian:12
#sudo ctr -n k8s.io images rm docker.io/library/xxxx:yyyy

# Image Migration: Containerd to >>> Kubernetes
ctr -n k8s.io images pull docker.io/rancher/rancher-agent:v2.10.3
ctr -n k8s.io images list | grep rancher-agent [Verify]

>> Local Image Management:
Default Dir: /var/lib/containerd
sudo ctr image pull docker.io/library/nginx:latest [Get image on containerd]
sudo ctr -n k8s.io image pull docker.io/library/nginx:latest [Get image on Kubernetes]

>> Exporting image to file:
sudo ctr -n k8s.io images export --platform linux/amd64 /root/imajlar/nginx-complete.tar docker.io/library/nginx:latest
>> Importing image from file:
sudo ctr -n k8s.io images import --platform linux/amd64 /root/imajlar/nginx-complete.tar

# Imperative:
kubectl run debian-sv --image=debian:12 --restart=Never -- /bin/bash -c "sleep infinity" [one pod]
kubectl exec -it debian-sv -- /bin/bash
#kubectl create deployment debian-dep --image=debian:12 -- /bin/bash -c "sleep infinity" [deployment for dcale]

# Nodes, Pods, Services, Deployments and More...
kubectl get all -n web-page -o wide
kubectl get pods -A -o wide
kubectl get pods -n web-page -o wide
kubectl get deployments,svc -n web-page
kubectl get pv,pvc -n web-page
kubectl get namespaces
kubectl get services -A -o wide
kubectl get services -n web-page
kubectl get events -n web-page
kubectl get events -n cattle-system | grep rancher
kubectl get pod nginx-6478657dff-rzq94 -n web-page -o yaml
kubectl get configmap -n web-page
kubectl get secret -n web-page
kubectl describe node worker1
kubectl describe pod nginx-1234567 -n web-page
kubectl logs nginx-1234567 -n web-page
kubectl -n web-page logs nginx-1234567
kubectl logs nginx-1234567 -n web-page -c <container-name> [multi containers]

# Updating:
kubectl set image deployment/nginx-deployment nginx=nginx:latest -n web-page

# Kubernetes Networking:
kubectl expose pod <pod_name> --type=LoadBalancer --name=<service_name> -n <namespace> [load balancer]
kubectl expose pod <pod_name> --type=ClusterIP --name=<service_name> -n <namespace> [cluster ip]
kubectl port-forward pod/<pod_name> 8080:80 [port forwarding]
kubectl expose pod <pod_name> --type=NodePort --name=<service_name> -n <namespace> [node port]
kubectl create ingress example-ingress --rule="host=www.farukguler.com, path=/blockchain/*, service=blockchain-service:80" -n web-page [ingress]

# Taint and Untaint:
kubectl describe node master1 | grep Taint [Taint Check]
kubectl taint nodes master1 node-role.kubernetes.io/control-plane:NoSchedule  [Master1 Node Apply Taint]
kubectl taint nodes master1 node-role.kubernetes.io/control-plane:NoSchedule- [Master1 Node Remove Taint]
kubectl taint nodes master1 node.kubernetes.io/unschedulable:NoSchedule-      [Master1 Node Remove Taint]

kubectl taint nodes worker1 custom=deny:NoSchedule [Worker1 Apply Taint]
kubectl taint nodes worker1 custom=deny:NoSchedule- [Worker1 Remove Taint]

# Namespaces
kubectl create namespace web-page
kubectl delete namespace web-page

# Scaling:
kubectl scale deployment mysql --replicas=3 -n web-page

# Pod acces to internet: [dns file]
kubectl exec -ti nginx-1234567 -- bash
echo "nameserver 8.8.8.8" | tee -a /etc/resolv.conf
apt update
apt install neofetch

# More:
https://kubernetes.io/pt-br/docs/reference/kubectl/cheatsheet/
https://cheatsheets.zip/kubernetes
